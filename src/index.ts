import { GatewayIntentBits } from 'discord.js';
import { config } from 'dotenv';
import { CharmClient } from './core/CharmClient.js';
import { logger } from './core/Logger.js';

// Importa charms
import { sayCharm, sayMetadata } from './charms/say.js';
import { pingCharm, pingMetadata } from './charms/ping.js';
import { embedCharm, embedMetadata } from './charms/embed.js';
import { helpCharm, helpMetadata } from './charms/help.js';
import { avatarCharm, avatarMetadata } from './charms/avatar.js';
import { pollCharm, pollMetadata } from './charms/poll.js';
import { serverinfoCharm, serverinfoMetadata } from './charms/serverinfo.js';

/**
 * Parser de argumentos da linha de comando
 */
function parseArgs(): {
  token?: string;
  prefix?: string;
  help?: boolean;
  version?: boolean;
} {
  const args = process.argv.slice(2);
  const parsed: any = {};

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--token':
      case '-t':
        parsed.token = args[++i];
        break;
      case '--prefix':
      case '-p':
        parsed.prefix = args[++i];
        break;
      case '--help':
      case '-h':
        parsed.help = true;
        break;
      case '--version':
      case '-v':
        parsed.version = true;
        break;
    }
  }

  return parsed;
}

/**
 * Mostra ajuda da linha de comando
 */
function showHelp(): void {
  console.log(`
üîÆ DeepCode Charm Framework v1.0.0

USO:
  bun run src/index.ts [op√ß√µes]

OP√á√ïES:
  --token, -t <token>     Token do bot Discord
  --prefix, -p <prefix>   Prefixo dos comandos (padr√£o: $)
  --help, -h              Mostra esta ajuda
  --version, -v           Mostra a vers√£o

EXEMPLOS:
  bun run src/index.ts --token SEU_TOKEN_AQUI
  bun run src/index.ts --token SEU_TOKEN --prefix !
  bun run src/index.ts --help

CONFIGURA√á√ÉO:
  Voc√™ tamb√©m pode usar um arquivo .env:
  
  DISCORD_TOKEN=seu_token_aqui
  PREFIX=$
  BOT_STATUS=online
  LOG_LEVEL=info

COMANDOS DISPON√çVEIS NO BOT:
  $say[texto]                    - Bot envia uma mensagem
  $ping[]                        - Mostra lat√™ncia do bot
  $embed[t√≠tulo|descri√ß√£o|cor]   - Cria um embed personalizado
  $help[]                        - Lista todos os comandos

MAIS INFORMA√á√ïES:
  üìö Documenta√ß√£o: ./docs/
  üîí Seguran√ßa: ./docs/SECURITY.md
  üìñ Exemplos: ./docs/USAGE.md
  `);
}

/**
 * Mostra vers√£o
 */
function showVersion(): void {
  console.log('DeepCode Charm Framework v1.0.0');
}

/**
 * Inicializa√ß√£o do bot DeepCode Charm
 */
async function main() {
  // Parse argumentos da linha de comando
  const args = parseArgs();

  // Mostra ajuda se solicitado
  if (args.help) {
    showHelp();
    return;
  }

  // Mostra vers√£o se solicitado
  if (args.version) {
    showVersion();
    return;
  }

  // Carrega vari√°veis de ambiente
  config();

  // Obt√©m token (prioridade: CLI args > .env)
  const token = args.token || process.env.DISCORD_TOKEN;
  
  if (!token) {
    console.error('‚ùå DISCORD_TOKEN n√£o encontrado!');
    console.log('\nüí° Use uma das op√ß√µes:');
    console.log('   1. Linha de comando: --token SEU_TOKEN');
    console.log('   2. Arquivo .env: DISCORD_TOKEN=seu_token');
    console.log('   3. Vari√°vel de ambiente: export DISCORD_TOKEN=seu_token');
    console.log('\nüìñ Para mais ajuda: --help');
    process.exit(1);
  }

  try {
    console.log('üöÄ Iniciando DeepCode Charm Framework...');
    
    // Configura√ß√µes do cliente
    const clientOptions = {
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
      ],
      prefix: args.prefix || process.env.PREFIX || '$',
      status: (process.env.BOT_STATUS as any) || 'online',
      activity: {
        name: process.env.BOT_ACTIVITY_NAME || 'com charms m√°gicos ‚ú®',
        type: (process.env.BOT_ACTIVITY_TYPE as any) || 'PLAYING'
      },
      adminUsers: process.env.ADMIN_USERS?.split(',').map(id => id.trim()) || [],
      allowedGuilds: process.env.ALLOWED_GUILDS?.split(',').map(id => id.trim()) || [],
      rateLimit: {
        maxCommands: parseInt(process.env.RATE_LIMIT_MAX || '10'),
        timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW || '60')
      }
    };

    console.log(`üîÆ Prefix configurado: ${clientOptions.prefix}`);
    console.log(`üìä Rate limit: ${clientOptions.rateLimit.maxCommands} comandos/${clientOptions.rateLimit.timeWindow}s`);

    // Cria o cliente
    const client = new CharmClient(clientOptions);

    // Registra charms b√°sicos
    registerBasicCharms(client);

    // Configura handlers de processo
    setupProcessHandlers(client);

    // Inicia o bot
    await client.start(token);

    logger.info('üöÄ DeepCode Charm Framework iniciado com sucesso!');

  } catch (error) {
    console.error('‚ùå Falha cr√≠tica na inicializa√ß√£o:', error);
    process.exit(1);
  }
}

/**
 * Registra todos os charms b√°sicos no cliente
 */
function registerBasicCharms(client: CharmClient): void {
  console.log('üîß Registrando charms b√°sicos...');

  const charms = [
    { func: sayCharm, meta: sayMetadata },
    { func: pingCharm, meta: pingMetadata },
    { func: embedCharm, meta: embedMetadata },
    { func: helpCharm, meta: helpMetadata },
    { func: avatarCharm, meta: avatarMetadata },
    { func: pollCharm, meta: pollMetadata },
    { func: serverinfoCharm, meta: serverinfoMetadata }
  ];

  for (const { func, meta } of charms) {
    try {
      client.registerCharm(func, meta);
      console.log(`   ‚úÖ ${meta.name} registrado`);
    } catch (error) {
      console.error(`   ‚ùå Erro ao registrar charm ${meta.name}:`, error);
    }
  }

  console.log(`üéâ ${charms.length} charms registrados com sucesso!\n`);
}

/**
 * Configura handlers para sinais do processo
 */
function setupProcessHandlers(client: CharmClient): void {
  // Shutdown gracioso
  const shutdown = async (signal: string) => {
    console.log(`\nüîÑ Sinal recebido: ${signal}. Iniciando shutdown...`);
    
    try {
      await client.shutdown();
      console.log('‚úÖ Shutdown conclu√≠do com sucesso');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Erro durante shutdown:', error);
      process.exit(1);
    }
  };

  // Handlers de sinais
  process.on('SIGINT', () => shutdown('SIGINT'));
  process.on('SIGTERM', () => shutdown('SIGTERM'));

  // Handler de erros n√£o tratados
  process.on('uncaughtException', (error) => {
    console.error('‚ùå Erro n√£o tratado:', error);
    process.exit(1);
  });

  process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promise rejeitada n√£o tratada:', { reason, promise });
    process.exit(1);
  });
}

/**
 * Informa√ß√µes de vers√£o e sistema
 */
function logSystemInfo(): void {
  const nodeVersion = process.version;
  const platform = process.platform;
  const arch = process.arch;
  
  console.log('üìä Informa√ß√µes do sistema:');
  console.log(`   Node.js: ${nodeVersion}`);
  console.log(`   Plataforma: ${platform} ${arch}`);
  console.log(`   PID: ${process.pid}`);
  console.log(`   Mem√≥ria: ${Math.round(process.memoryUsage().rss / 1024 / 1024)}MB\n`);
}

// Inicia a aplica√ß√£o
if (require.main === module) {
  logSystemInfo();
  main().catch((error) => {
    console.error('‚ùå Erro fatal na inicializa√ß√£o:', error);
    process.exit(1);
  });
}

// Exporta para uso como m√≥dulo
export { CharmClient, logger };
export * from './types/index.js';
export * from './utils/security.js';
export * from './utils/rateLimit.js';
